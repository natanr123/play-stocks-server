import AjaxUtils from 'app/service/AjaxUtils';
import GoogleFinanceService from 'app/service/GoogleFinanceService';
export default class Stock
{
    symbol = null;
    price = null;
    static count = 0;
    static isLive = false;

    constructor(symbol) {
        this.symbol = symbol;
    }

    getCurrentPrice()
    {
        Stock.count++;
        let url = 'http://finance.google.com/finance/info?client=ig&q=NASDAQ%3A';
        url += this.symbol;
        //YHOO

        return GoogleFinanceService.info(this.symbol)
            .then((responseObj)=>{
                // console.log('aaaaaaaaaa: ',response);
                // response = response.replace('//','');
                // response = response.replace('[','');
                // response = response.replace(']','');
                // console.log('response: ',response);
                // let obj = JSON.parse(response);
                // console.log(obj);

                let priceStr = responseObj['l'];

                let price = Number(priceStr);
                return price;

        }).catch((error)=>{
            console.log('error in getCurrentPrice: ',error);
            throw error;
        });
        // return new Promise((resolve, reject)=>{
        //     AjaxUtils.loadText(url).then((response)=>{
        //         response = response.replace('//','');
        //         response = response.replace('[','');
        //         response = response.replace(']','');
        //         //console.log('response: ',response);
        //         let obj = JSON.parse(response);
        //         //console.log(obj);
        //
        //         let priceStr = obj['l'];
        //
        //         resolve(Number(priceStr));
        //     })
        // });
    }


    getCurrentPriceYahooFiance(stock)
    {
        Stock.count++;
        let url = 'https://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20yahoo.finance.quotes%20where%20symbol%20in%20(%22';
        url += this.symbol;
        url += '%22)&format=json&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys&callback=';
        //YHOO
        return new Promise((resolve, reject)=>{
            AjaxUtils.loadJson(url).then((response)=>{
                let obj = response;
                let priceStr = obj.query.results.quote.LastTradePriceOnly;
                if(obj.query.results.quote.AskRealtime && obj.query.results.quote.BidRealtime) {
                    Stock.isLive = true;
                } else {
                    Stock.isLive = false;
                }

                resolve(Number(priceStr));
            })
        });
    }

}