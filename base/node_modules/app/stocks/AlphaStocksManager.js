import StocksHistory from 'app/repository/StocksHistory';
import MarketTime from 'app/entity/MarketTime';
import HistoryLine from 'app/entity/HistoryLine';
import MomentTimezone from 'moment-timezone'
import Interval from 'app/service/Interval';
import AlphaVantageService from 'app/service/AlphaVantageService';
import StocksSymbols from 'app/service/StocksSymbols'
import TimeUtils from 'app/service/TimeUtils'

export default class AlphaStocksManager
{
    static instance = null;
    limits = null;
    /**
     *
     * @return {AlphaStocksManager}
     */
    static getInstance()
    {
        if(AlphaStocksManager.instance === null) {
            AlphaStocksManager.instance = new AlphaStocksManager();
        }
        return AlphaStocksManager.instance;
    }

    async loop(delay,limit,clock,callback)
    {
        let counter = 0;

        if(limit === -1 || limit === null) {
            limit = 900719925474099;
        }
        while (counter < limit) {
            this.limits = {counter: counter,limit: limit, oldLimit: 10000000};
            if(TimeUtils.isNYSEopen()) {
                callback();
            }

            counter++;
            await Interval.sleep(Math.floor(delay),clock);
        }
        return true;
    }

    start(delay,limit)
    {
        return this.loop(delay,limit,null,AlphaStocksManager.step);
    }

    static async step()
    {
        let symbol = StocksSymbols.MSFT;
        //StocksHistory.getInstance().clearStock(symbol);
        await AlphaVantageService.info(symbol).then((response)=> {
            let lines = AlphaStocksManager.getInstance().processResponse(StocksSymbols.MSFT, response);

            StocksHistory.getInstance().histories[symbol] = lines;
            if(lines.length !== 100) {
                throw new Error('step problem',new Date());
            }
            AlphaStocksManager.verifyData(lines);
        });
    }

    /**
     *
     * @param {HistoryLine[]} lines
     */
    static verifyData(lines)
    {
        let verifiedLines = 0;
        let prevLine = lines[0];
        for(let i = 1;i < 100;i++) {
            let currentLine = lines[i];
            if( (prevLine.time - currentLine.time) < 3600*5) {
                verifiedLines++;
                if( (prevLine.time-currentLine.time)>60*2+10) {
                    console.log('Bad Line1:',new Date());
                    console.log('-------------------------');
                    console.log('Bad Line2:',currentLine,prevLine);
                    console.log('Bad Line2 time:',prevLine.time,currentLine.time);
                    console.log('Bad Line2 delta:',prevLine.time - currentLine.time);
                    console.log('!!!!!!!!!!!!!!!!!!!!!!!!!');
                    console.log('Bad Line3:',lines);
                    throw new Error('Bad Line4:',new Date());

                }
            }

            prevLine = currentLine;
        }
        return verifiedLines;
    }

    processTime(responseTime)
    {
        // https://stackoverflow.com/questions/18448347/how-to-create-time-in-a-specific-time-zone-with-moment-js

        let newYork = MomentTimezone.tz(responseTime,'YYYY-MM-DD HH:mm:ss','America/New_York');
        return newYork.toDate().getTime()/1000;
    }

    processResponse(symbol,response)
    {
        //StocksHistory.getInstance().clearStock(symbol);
        //console.log(listing);
        let timeSeries = response['Time Series (1min)'];
        let lines = [];
        for (let key in timeSeries) {
            let utcTime = this.processTime(key);

            let entry = timeSeries[key];
            let price = Number(entry['4. close']);
            let historyLine = new HistoryLine(utcTime,price,symbol,key);
            //console.log('ddd: ',key,' = ',historyLine);
            lines.push(historyLine);
            //StocksHistory.getInstance().add(historyLine);
        }
        return lines;


    }



}