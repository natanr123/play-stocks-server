import IntrinioRealtime from 'intrinio-realtime'

import Engine from 'app/engine/Engine'
import Entity from 'app/entity/Entity'
import HistoryLineIntrinio from 'app/entity/HistoryLineIntrinio'
import TimeUtils from 'app/service/TimeUtils'
import IntrinioStocksHistoryRepository from 'app/repository/IntrinioStocksHistoryRepository'
import File from 'app/service/File'
import Rx from 'rxjs/Rx'

import MyDB from 'app/MyDB'

import CsvParse from 'csv-parse'
import fs from 'fs'


// @TODO trim results older than 100 minutes ago so not getting huge data base
// @TODO throw exception if DataBase become hughes
export default class RecordIntrinioEngine extends Engine
{
    static balancesCSV:File;
    static MAX_TIME_DELTA = 200;
    static quoteToHistoryLine(quote) {
        let { ticker, type, price, size, timestamp } = quote;
        return new HistoryLineIntrinio(timestamp,price,ticker,null,size);
    }

    static onQuote(quote) {
        let { ticker, type, price, size, timestamp } = quote;

        if(type === 'last') {
            let count = IntrinioStocksHistoryRepository.getInstance().count();
            if(count > 20000) {
                throw new Error('Too much lines: ' + count);
            }
            let historyLine = FakeIntrinioEngine.quoteToHistoryLine(quote);
            let add = 0;
            if(Math.abs(TimeUtils.timeNowUtc()-timestamp)<FakeIntrinioEngine.MAX_TIME_DELTA) {
                add = 1;
                IntrinioStocksHistoryRepository.getInstance().add(historyLine);
            }
            FakeIntrinioEngine.balancesCSV.appendCSVLine([timestamp,Math.round(TimeUtils.timeNowUtc()),TimeUtils.timeInNewYork(new Date()),price,add])


        }
    }

    //trimOld


    static async start()
    {
        let parser = CsvParse({delimiter: ","}, function(err, data){

            let counter = 0;
            let instance = IntrinioStocksHistoryRepository.getInstance();
            data.forEach((line)=>{
                if((counter !== 0)&& counter <= 7999) {


                    if (isNaN(Number(line[0]))) {
                        console.log(line);
                        throw new Error('Error loading line: ' + line[0]);

                    }
                    let historyLine = new HistoryLineIntrinio(Number(line[0]), Number(line[3]), 'MSFT', Number(line[2]), 1000);

                    instance.add(historyLine);
                }
                counter++;
            });
            console.log('IntrinioStocksHistoryRepository.getInstance().count(): ', IntrinioStocksHistoryRepository.getInstance().count());
            console.log('IntrinioStocksHistoryRepository.getInstance().lastResult().time: ', IntrinioStocksHistoryRepository.getInstance().lastResult().time);

        });

        // parser.on('finish', (output)=>{
        //     console.log('IntrinioStocksHistoryRepository.getInstance().count(): ', IntrinioStocksHistoryRepository.getInstance().count());
        // });

        fs.createReadStream(__dirname+'/../../../../record/quests_1507069961.csv').pipe(parser)

    }
}