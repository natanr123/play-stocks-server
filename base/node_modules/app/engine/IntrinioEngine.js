import IntrinioRealtime from 'intrinio-realtime'

import Engine from 'app/engine/Engine'
import Entity from 'app/entity/Entity'
import HistoryLineIntrinio from 'app/entity/HistoryLineIntrinio'
import TimeUtils from 'app/service/TimeUtils'
import IntrinioStocksHistoryRepository from 'app/repository/IntrinioStocksHistoryRepository'
import File from 'app/service/File'

import MyDB from 'app/MyDB'


// @TODO trim results older than 100 minutes ago so not getting huge data base
// @TODO throw exception if DataBase become hughes
export default class IntrinioEngine extends Engine
{
    static balancesCSV:File;
    static MAX_TIME_DELTA = 200;
    static quoteToHistoryLine(quote) {
        let { ticker, type, price, size, timestamp } = quote;
        return new HistoryLineIntrinio(timestamp,price,ticker,null,size);
    }

    static onQuote(quote) {
        let { ticker, type, price, size, timestamp } = quote;

        if(type === 'last') {
            let count = IntrinioStocksHistoryRepository.getInstance().count();
            if(count > 20000) {
                throw new Error('Too much lines: ' + count);
            }

            let historyLine = IntrinioEngine.quoteToHistoryLine(quote);
            let add = 0;
            if(Math.abs(TimeUtils.timeNowUtc()-timestamp)<IntrinioEngine.MAX_TIME_DELTA) {
                add = 1;
                IntrinioStocksHistoryRepository.getInstance().add(historyLine);
            }
            IntrinioEngine.balancesCSV.appendCSVLine([timestamp,Math.round(TimeUtils.timeNowUtc()),TimeUtils.timeInNewYork(new Date()),price,add,size,ticker])


        }
    }

    //trimOld


    static async start():IntrinioRealtime
    {
        'use strict';


        IntrinioEngine.balancesCSV = await File.createBlank('./out_data/quests_'+Math.round(TimeUtils.timeNowUtc())+'.csv');
        await IntrinioEngine.balancesCSV.appendCSVLine(['quoteTime','timeUTC','timeNY','price','add','size','ticker']);


        let ir = new IntrinioRealtime({
            username: "",
            password: "",
        });


        ir.onQuote(IntrinioEngine.onQuote);

        // let { ticker, type, price, size, timestamp } = quote;
        // console.log('111111: ',quote);
        // type: 'bid',
        //     timestamp: 1500407999.2929556,
        //     ticker: 'MSFT',
        //     size: 200,
        //     price: 73.11 }


        // console.log("QUOTE: ", ticker, type, price, size, timestamp)



        ir.join("MSFT");
        return ir;
    }
}