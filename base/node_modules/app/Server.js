console.log('STARTING: ','Server.js');
import KoaStatic from 'koa-static'
import Koa from 'koa';
import Router from 'koa-router'
import KoaLogger from 'koa-logger'
import log4js from 'log4js'
import fs from 'fs'
import morgan from 'koa-morgan'



import Account from 'app/entity/Account'
import StocksManager from 'app/stocks/StocksManager';
import Order from 'app/entity/Order';
import Entity from 'app/entity/Entity';
import TimeUtils from 'app/service/TimeUtils';
import GoogleFinanceService from 'app/service/GoogleFinanceService';
import AlphaStocksManager from 'app/stocks/AlphaStocksManager';
import StocksSymbols from 'app/service/StocksSymbols';
import AlphaVantageService from 'app/service/AlphaVantageService';
import FileService from 'app/service/FileService'
import AjaxUtils from 'app/service/AjaxUtils'

import OrdersRepository from 'app/repository/OrdersRepository'
import AccountRepository from 'app/repository/AccountsRepository'
import PositionsRepository from 'app/repository/PositionsRepository'
import Position from 'app/entity/Position'
import StocksHistory from 'app/repository/StocksHistory'
import IntrinioEngine from 'app/engine/IntrinioEngine'
import IntrinioStocksHistoryRepository from 'app/repository/IntrinioStocksHistoryRepository'
import File from 'app/service/File'
import Interval from 'app/service/Interval'
import FakeIntrinioEngine from 'app/engine/FakeIntrinioEngine'
import Config from 'app/config/Config'
import DefaultRoutes from 'app/routes/DefaultRoutes';

export default class Server
{


    validateMarket()
    {
        if(TimeUtils.isNYSEopen()) {

        } else {
            throw new Error('Market closed');
        }
    }

    async start()
    {
        const app = new Koa();

        let balancesCSV:File;
        balancesCSV = await File.createBlank('./out_data/balances.csv');
        await balancesCSV.appendCSVLine(['time','counter','acc1','acc2','acc3','acc4','acc5','acc6']);

        await FileService.getInstance().createFolderIfDoesNotExists('./logs');

        const accessLogStream = fs.createWriteStream('./logs' + '/access.log',
            { flags: 'a' });

        app.use(morgan('combined', { stream: accessLogStream }));
        let staticDir = './';
        console.log('Play-stocks-server started running: ',Date.now());
        console.log('Starting Koa Static in DIR: ',staticDir);



        app.use(KoaStatic(staticDir));
        app.use(async (ctx, next)=> {

            const start = new Date();
            await next();
            const ms = new Date() - start;
            //console.log(`${ctx.method} ${ctx.url} - ${ms}`);
        });

        app.use(async (ctx, next)=>{
            await next();
            //console.log('setting cros');
            ctx.set('Access-Control-Allow-Origin', '*');
        });


        let router = new Router();
        let defaultRoutes = new DefaultRoutes(router);
        defaultRoutes.init(router);


        router.get('/hello', (ctx, next)=> {

            console.log('/hello was called');
            ctx.body = JSON.stringify({'test':123});
            //return next();
        });

        // Account will live unless it is idle for too long

        router.get('/stocks', (ctx, next)=> {
            this.validateMarket();
            let symbol = ctx.query.symbol;
            let delay = Number.parseInt(ctx.query.delay);
            let stockNow = StocksManager.getStock(symbol);
            let stockOld = StocksHistory.find(symbol,delay);
            let stocks =[];
            let info = {'symbol':symbol,priceNow:null,priceOld:null};
            if(stockNow) {
                info.priceNow = stockNow.price;
            }
            if(stockOld) {
                info.priceOld = stockOld.price;
            }

            stocks.push(info);
            ctx.body = JSON.stringify(stocks);
            //return next();
        });


        // http://localhost:3000/history?symbol=MSFT
        router.get('/history_alpha', (ctx, next)=> {

            // let list = StocksHistory.getInstance().histories[StocksSymbols.MSFT].slice(-200)
            let list = StocksHistory.getInstance().histories[StocksSymbols.MSFT];
            ctx.body = JSON.stringify(list);
            //return next();
        });



        router.get('/accounts/create', (ctx, next)=> {
            let isAI = ctx.query.isAI;
            let balance = parseInt(ctx.query.balance);
            let account = new Account(balance,isAI);

            //MyDB.getInstance().set(account.id,account);
            AccountRepository.getInstance().add(account);
            console.log('Creating account: ',account);
            ctx.body = JSON.stringify(account);
            //return next();
        });

        router.get('/accounts/:number', (ctx, next)=> {
            let accountNumber = parseInt(ctx.params.number);
            let account = Account.loadByNumber(accountNumber);
            ctx.body = JSON.stringify(account);
            //return next();
        });

        router.get('/accounts', (ctx, next)=> {
            let accounts = AccountRepository.getInstance().all();
            ctx.body = JSON.stringify(accounts);
            //return next();
        });



        router.get('/limits', (ctx, next)=> {
            console.log('limit at: ',new Date())
            ctx.body = JSON.stringify({loop: StocksManager.limits,hist: StocksHistory.histories['YHOO'].length});
            //return next();
        });

        router.get('/google',  async (ctx, next)=> {

            let symbol = ctx.query.symbol;
            if((symbol!== 'YHOO') && (symbol!=='APPL')){
                throw new Error('symbol must be YHOO or APPL');
            }

            let info = await GoogleFinanceService.info(symbol);
            ctx.body = JSON.stringify(info);
        });

        router.get('/alpha',  async (ctx, next)=> {

            let symbol = StocksSymbols.MSFT;

            let info = await AlphaVantageService.info(symbol);
            ctx.body = JSON.stringify(info);
        });



        router.get('/orders', (ctx, next)=> {
            this.validateMarket();
            let accountNumber = parseInt(ctx.query.accountNumber);
            let account = Account.loadByNumber(accountNumber);

            console.log('getting orders: accountNumber - ',accountNumber);

            let orders = account.getOrders();
            ctx.body = JSON.stringify(orders);
        });

        router.get('/positions', (ctx, next)=> {
            this.validateMarket();
            if(ctx.query.accountNumber !== undefined) {
                let accountNumber = parseInt(ctx.query.accountNumber);
                let account = Account.loadByNumber(accountNumber);
                let positions = account.getPositions();
                ctx.body = JSON.stringify(positions);
            } else {
                let positions = PositionsRepository.getInstance().all();
                ctx.body = JSON.stringify(positions);
            }

        });



        app.use(router.routes());
        app.use(router.allowedMethods());

        console.log('listening on 3000');
        app.listen(3000);
        console.log('app: ',app);

        //let x= new StocksManager();
        //StocksManager.loopStocks();
        //AlphaStocksManager.getInstance().start(30*1000,null);
        //
        let env = Config.env();
        console.log('Config.env()Config.env()Config.env(): ',env);

        env.intrinioEngine.start();


        this.sampleCSV(balancesCSV);
        console.log('Time Now: ',TimeUtils.now_formatted());
        console.log('TimeUtils.timeInNewYork(): ',TimeUtils.timeInNewYork());
    }

    async sampleCSV(balancesCSV:File) {
        let counter = 0;
        while(true) {
            if(AccountRepository.getInstance().all().length===6) {
                counter++;
                let arr = [TimeUtils.formattedUTC(new Date()),counter].concat(AccountRepository.getInstance().createTotalEquityArr());
                balancesCSV.appendCSVLine(arr);

            }
            await Interval.sleep(1000*60);
        }
    }
}


