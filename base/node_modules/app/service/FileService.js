import fs from 'fs'
import fsp from 'fs-promise';

import TimeUtils from 'app/service/TimeUtils';
export default class FileService
{
    /**
     *
     * @type {FileService}
     */
    static instance=null;
    outFile = './out_data/out.txt';
    outFileExperiments = './out_data/exp.txt';
    fileCreated = null;


    /**
     *
     * @return {FileService}
     */
    static getInstance()
    {
        if(FileService.instance===null) {
            FileService.instance = new FileService();
        }
        return FileService.instance;
    }

    async createFolderIfDoesNotExists(path)
    {
        let e = await fsp.exists(path);
        if(!e) {
            return await fsp.mkdir(path);
        } else {
            return null;
        }
    }

    async init()
    {
        let e = await fsp.exists('./out_data');
        if(!e) {
            return await fsp.mkdir('./out_data');
        } else {
            console.log('FOLDER already existed');
            return null;
        }
    }

    readFile(path)
    {
        return fs.readFileSync(path);
    }

    write(outFile,msg)
    {
        let time = TimeUtils.now_formatted();
        if(this.fileCreated === null) {
            this.fileCreated = time;
        }



        return fsp.writeFile(outFile,"FILE CREATED = "+this.fileCreated+" WRITE TIME = "+time+" \r\n"+msg)


    }


    write(outFile,msg)
    {
        let time = TimeUtils.now_formatted();
        if(this.fileCreated === null) {
            this.fileCreated = time;
        }


        
        return fsp.writeFile(outFile,"FILE CREATED = "+this.fileCreated+" WRITE TIME = "+time+" \r\n"+msg)


    }

}