import Service from 'app/service/Service'
import XMLHttpRequest from 'app/service/NodeXMLHttpRequest'

export default class AjaxUtils extends Service
{
    static json_verify(str) { try { JSON.parse(str); return true; } catch (e) { return false; }};

    static lastUrl = 'NOTHING';
    static loadJson(url)
    {
        AjaxUtils.lastUrl = url;
        let xhr = AjaxUtils.createCORSRequest('GET', url);

        if (!xhr) {
            console.log('CORS not supported');
            return new Promise(null);
        }

        // Response handlers.
        return new Promise((resolve, reject)=>{
            xhr.onload = ()=> {
                let text = xhr.responseText;
                if(!AjaxUtils.json_verify(text)) {
                    console.log('Can not verify json: ',new Date());
                    console.log('verify url: ',url);
                    console.log('verify text: ',text);
                    throw new Error('Can not verify json: ',new Date());
                }

                let obj = JSON.parse(text);

                resolve(obj);
            };
            xhr.onerror = function() {
                console.log('ERROR url11111: ',url);

                console.log('Woops, there was an error making the request.');
                console.error('Ajax error :',xhr.statusText);
                reject('Ajax error :');
            };
            xhr.send();
        });
    }

    static loadText(url)
    {
        AjaxUtils.lastUrl = url;
        let xhr = AjaxUtils.createCORSRequest('GET', url);
        if (!xhr) {
            console.log('CORS not supported');
            return new Promise(null);
        }

        // Response handlers.
        return new Promise((resolve, reject)=>{
            xhr.onload = ()=> {
                let text = xhr.responseText;
                resolve(text);
            };
            xhr.onerror = function() {
                console.log('Woops, there was an error making the request.');
            };
            xhr.send();
        });
    }

    static createCORSRequest(method, url) {
        let xhr = new XMLHttpRequest();
        if ("withCredentials" in xhr) {
            // XHR for Chrome/Firefox/Opera/Safari.
            xhr.open(method, url, true);
        } else if (typeof XDomainRequest != "undefined") {
            // XDomainRequest for IE.
            xhr = new XDomainRequest();
            xhr.open(method, url);
        } else {
            console.log('CORS not supported.');
            // CORS not supported.
            xhr = null;
        }
        return xhr;
    }
}