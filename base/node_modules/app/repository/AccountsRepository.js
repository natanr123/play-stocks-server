// To be used by the loadStock sensor (first int is the memory destination second in is memory block that hold the time in seconds. for when to pull the stock data)
import HistoryLine from 'app/entity/HistoryLine'
import StocksSymbols from 'app/service/StocksSymbols'

import MathUtils from 'app/service/MathUtils'

import Entity from 'app/entity/Entity';
import MyDB from 'app/MyDB'
import Position from 'app/entity/Position'
import Account from 'app/entity/Account'



export default class AccountsRepository
{
    static instance = null;

    /**
     *
     * @return {AccountsRepository}
     */
    static getInstance()
    {
        if(AccountsRepository.instance === null) {
            AccountsRepository.instance = new AccountsRepository();
        }
        return AccountsRepository.instance;
    }

    add(account)
    {
        Entity.addToDB(account);
    }

    find_by_id(id)
    {
        let accounts = MyDB.getInstance().select(Account,(account)=>{
            return account.id === id;
        });

        if(accounts.length===1) {
            return accounts[0];
        } else if(accounts.length===0) {
           return null;
        } else {
            console.log('Account findOrCreatePosition positions.length must be 0 or 1 got '+accounts.length);
            throw new Error('Account findOrCreatePosition positions.length must be 0 or 1 got '+accounts.length);
        }
    }

    all():Array<Account> {
        return MyDB.getInstance().allByClass(Account);
    }

    createTotalEquityArr() {
        return AccountsRepository.getInstance().all().map((account)=>{
            return MathUtils.round(account.totalEquity);
        });
    }


}