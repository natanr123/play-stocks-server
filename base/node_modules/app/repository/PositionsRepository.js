// To be used by the loadStock sensor (first int is the memory destination second in is memory block that hold the time in seconds. for when to pull the stock data)
import HistoryLine from 'app/entity/HistoryLine'
import StocksSymbols from 'app/service/StocksSymbols'

import Entity from 'app/entity/Entity';
import MyDB from 'app/MyDB'
import Position from 'app/entity/Position'
import Account from 'app/entity/Account'


export default class PositionsRepository
{
    static instance = null;
    // Just for search



    /**
     *
     * @return {PositionsRepository}
     */
    static getInstance()
    {
        if(PositionsRepository.instance === null) {
            PositionsRepository.instance = new PositionsRepository();
        }
        return PositionsRepository.instance;
    }

    add(position)
    {
        Entity.addToDB(position);
    }

    /**
     *
     * @param {Account} account
     * @param symbol
     * @return {*}
     */
    find_by_account_and_symbol(account,symbol)
    {
        let positions = account.getPositions().filter((position)=>{
            return position.symbol === symbol;
        });
        // let positions = MyDB.getInstance().select(Position,(position)=>{
        //     return (position.account === this) && (position.symbol === symbol);
        // });

        if(positions.length===1) {
            return positions[0];
        } else if(positions.length===0) {
           return null;
        } else {
            console.log('PositionsRepository find_by_account_and_symbol positions.length must be 0 or 1 got '+positions.length);
            throw new Error('PositionsRepository find_by_account_and_symbol positions.length must be 0 or 1 got '+positions.length);
        }
    }

    all() {
        return MyDB.getInstance().allByClass(Position);
    }


}