import StocksHistory from 'app/repository/StocksHistory'
import IntrinioStocksHistoryRepository from 'app/repository/IntrinioStocksHistoryRepository';
import TimeUtils from 'app/service/TimeUtils';
import Account from  'app/entity/Account'
export default class ApplicationController {

    validateMarket()
    {
        if(TimeUtils.isNYSEopen()) {

        } else {
            throw new Error('Market closed');
        }
    }

    history(ctx) {
        console.log('ApplicationController: ','history');
        // let list = StocksHistory.getInstance().histories[StocksSymbols.MSFT].slice(-200)
        let repository = IntrinioStocksHistoryRepository.getInstance();
        let list = repository.all();
        let count = list.length;
        let result = {'count': count};
        if(count > 0){
            let extra = {};
            extra.first = repository.firstResult();
            extra.last = repository.lastResult();
            extra.deltaTime = extra.last.time - extra.first.time;
            extra.delayFromNow = (Date.now()/1000) - extra.last.time;
            result.extra = extra;
        }
        result.list = list;
        ctx.set('Content-Type', 'application/json');
        ctx.body = JSON.stringify(result, null, 3);
        //return next();
    }

    // http://localhost:3000/last6by5?symbol=MSFT
    last6by5(ctx) {
        this.validateMarket();
        let symbol = ctx.query.symbol;
        IntrinioStocksHistoryRepository.getInstance().verifyTimeSync(symbol,TimeUtils.timeNowUtc());
        let data = IntrinioStocksHistoryRepository.getInstance().last6by5(symbol,TimeUtils.timeNowUtc());
        ctx.body = JSON.stringify(data);

        // let data = IntrinioStocksHistoryRepository.getInstance().last6by5(symbol,1507319044.297791);
        ctx.body = JSON.stringify(data);


    }

    startRecording() {
        ctx.set('Content-Type', 'application/json');
        ctx.body = JSON.stringify('Starting recording', null, 3);
    }

    createOrder(ctx) {

        this.validateMarket();

        let accountNumber = parseInt(ctx.query.accountNumber);
        let symbol = ctx.query.symbol;
        let quantity = parseInt(ctx.query.quantity);
        let account = Account.loadByNumber(accountNumber);
        let orderType = ctx.query.type;

        let repository = IntrinioStocksHistoryRepository.getInstance();
        let intrinioHistoryLine = repository.findCurrent(symbol,TimeUtils.timeNowUtc());
        if(!intrinioHistoryLine) {

            console.log('create/order must have a price',new Date(),intrinioHistoryLine);
            console.log('AjaxUtils.lastUrl: ',AjaxUtils.lastUrl);
            throw new Error('create/order must have a price! '+(new Date()).toString()+ ' '+AjaxUtils.lastUrl);
        }

        let order = account.placeOrder(symbol,quantity,intrinioHistoryLine.price,orderType);
        account.balance = account.balance - order.getTotal()*order.getSign();
        let position = account.getPosition(symbol);
        account.totalEquity = account.balance + position.valueByPrice(intrinioHistoryLine.price);

        ctx.body = JSON.stringify(order);

    }


}