// ValueObject
import MarketTime from 'app/entity/MarketTime';
import TimeUtils from 'app/service/TimeUtils';
import HistoryLine from 'app/entity/HistoryLine'
import Entity from 'app/entity/Entity';
export default class HistoryLineIntrinio extends Entity
{
    time;
    price;
    symbol;
    localTime;
    newYorkTime;
    size;
    constructor(time,price,symbol,newYorkTime,size)
    {
        super();
        this.size = size;
        this.time = time;
        this.price = price;
        this.symbol = symbol;
        this.localTime = Number(((new Date().getTime())).toFixed(2));
        this.localTimeStr =TimeUtils.formatted(new Date(Date.now()));

        this.localTimeNewYorkStr = TimeUtils.timeInNewYork(Number(((new Date().getTime())).toFixed(2)));
        this.utcTimeStr = TimeUtils.formattedUTC(new Date(Date.now()));
        if(!newYorkTime) {
            this.newYorkTime = TimeUtils.timeInNewYork(new Date(time*1000))
        } else {
            this.newYorkTime = newYorkTime;
        }
    }

    static newFromJson(obj) {
        return new HistoryLineIntrinio(obj.time,obj.price,obj.symbol,obj.newYorkTime)
    }

    isWithinTimeRange(baseTime,delta)
    {
        return Math.abs(this.time - baseTime)<=delta;
    }
}