// ValueObject
import MarketTime from 'app/entity/MarketTime';
import Entity from 'app/entity/Entity';

import TimeUtils from 'app/service/TimeUtils';

export default class HistoryLine
{

    time;
    price;
    symbol;
    localTime;
    newYorkTime;
    constructor(time,price,symbol,newYorkTime)
    {
        this.time = time;
        this.price = price;
        this.symbol = symbol;
        this.localTime = Number(((new Date().getTime())).toFixed(2));
        this.localTimeStr =TimeUtils.formatted(new Date(Date.now()));

        this.localTimeNewYorkStr = TimeUtils.timeInNewYork(Number(((new Date().getTime())).toFixed(2)));
        this.utcTimeStr = TimeUtils.formattedUTC(new Date(Date.now()));
        if(!newYorkTime) {
            this.newYorkTime = TimeUtils.timeInNewYork(new Date(time*1000))
        } else {
            this.newYorkTime = newYorkTime;
        }

    }

    isWithinTimeRange(baseTime,delta)
    {
        //console.log('this.time: ',this.time, 'baseTime: ',baseTime, 'delta: ',delta);
        //console.log('this.time - baseTime: ',Math.abs(this.time - baseTime));
        if(Math.abs(this.time - baseTime)<=delta) {
            return true;
        }
        return false
    }

}