import Entity from 'app/entity/Entity'
import MyDB from 'app/MyDB'
import Position from 'app/entity/Position'
import Order from 'app/entity/Order'
import OrdersRepository from 'app/repository/OrdersRepository'
import PositionsRepository from 'app/repository/PositionsRepository'
import StocksHistory from 'app/repository/StocksHistory'
import StocksSymbols from 'app/service/StocksSymbols'

export default class Account extends Entity
{

    number = -1;
    balance = 0;
    isAI = false;
    totalOrders = 0;
    totalSellOrders = 0;
    totalBuyOrders = 0;
    totalEquity:Number = 0;
    static currentAccountNumber = 0;

    constructor(balance,isAI)
    {
        super();
        this.balance = balance;
        this.totalEquity = balance;
        this.number = Account.generateAccountNumber();
        this.isAI = isAI;
    }

    /**
     *
     * @param number
     * @return {Account}
     */
    static loadByNumber(number)
    {
        return MyDB.getInstance().findByProp(Account,'number',number);
    }

    // The id does not MUST be auto increment
    static generateAccountNumber()
    {
        if(!(Account.currentAccountNumber)) {
            Account.currentAccountNumber = 0;
        }

        // This breaks CQS but never mind
        Account.currentAccountNumber++;
        return Account.currentAccountNumber;
    }


    getOrders()
    {
        return MyDB.getInstance().select(Order,(order)=>{
            return order.account === this;
        });
    }

    /**
     *
     * @return {Position[]}
     */
    getPositions()
    {
        return MyDB.getInstance().select(Position,(position)=>{
            return position.getAccount().equal(this);
        });
    }

    /**
     *
     * @param symbol
     * @return {Position|Null}
     */
    getPosition(symbol)
    {
        let positions =  this.getPositions().filter((position)=>{
            return position.symbol === symbol;
        });
        return positions[0] || null;
    }

    /**
     *
     * @param symbol
     * @param quantity
     * @param price
     * @param type
     * @return {Order}
     */
    buildOrder(symbol,quantity,price,type)
    {
        return new Order(this.id,symbol,quantity,price,type);
    }


    /**
     * @TODO handle missing price
     * @param symbol
     * @param quantity
     * @param type
     * @param price
     */
    placeOrder(symbol,quantity,price,type):Order
    {
        let order = this.buildOrder(symbol,quantity,price,type);
        OrdersRepository.getInstance().add(order);
        let position = this.getPosition(symbol);
        if(position === null) {
            position = this.buildPosition(symbol);
            PositionsRepository.getInstance().add(position);
        }
        if(order.isBuy()) {
            this.applyBuyOrder(order,position);

        } else if(order.isSell()) {
            this.applySellOrder(order,position);
        } else {
            throw new Error('placeOrder Type is not buy or sell');
        }
        order.position_id = position.id;
        return order;
    }

    /**
     * @param symbol
     * @return {Position}
     */
    buildPosition(symbol)
    {
        return new Position(this.id,symbol,0);
    }

    /**
     *
     * @param symbol
     * @return {Position}
     */
    findOrCreatePosition(symbol)
    {
        let positions = MyDB.getInstance().select(Position,(position)=>{
            console.log('(position.account === this)',position.account === this);
            console.log('(position.symbol === symbol)',position.symbol === symbol);
            return (position.account === this) && (position.symbol === symbol);
        });
        console.log('positions: ',positions);
        console.log('positions.length: ',positions.length);
        if(positions.length===1) {
            return positions[0];
        } else if(positions.length===0) {
            let p = new Position(this,symbol,0);
            Entity.addToDB(p);
            return p;
        } else {
            console.log('Account findOrCreatePosition positions.length must be 0 or 1 got '+positions.length);
            throw new Error('Account findOrCreatePosition positions.length must be 0 or 1 got '+positions.length);
        }
    }

    /**
     *
     * @param {Order} order
     * @param {Position} position
     */
    applyBuyOrder(order,position)
    {
        position.totalPaid = position.totalPaid + order.getTotal();
        position.quantity = position.quantity + order.quantity;
        this.totalOrders++;
        this.totalBuyOrders++;
    }

    /**
     *
     * @param {Order} order
     * @param {Position} position
     */
    applySellOrder(order,position)
    {
        position.totalGot = position.totalGot + order.getTotal();
        position.quantity = position.quantity - order.quantity;
        this.totalOrders++;
        this.totalSellOrders++;

    }



}