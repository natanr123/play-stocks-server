import Entity from 'app/entity/Entity'
import Position from 'app/entity/Position'
import Account from 'app/entity/Account'
import AccountsRepository from 'app/repository/AccountsRepository'

import MyDB from 'app/MyDB'

export default class Order extends Entity
{
    static TYPE_BUY = 'buy';
    static TYPE_SELL = 'sell';
    // Id is only relevant when saving to DB. So it does need to be in constructor
    /**
     * @type {Account} account
     */
    account_id;
    symbol;
    quantity;
    price;
    type;
    /**
     * @type {Position} position
     */
    position_id;
    constructor(account_id,symbol,quantity,price,type)
    {
        super();
        this.account_id = account_id;
        this.symbol = symbol;
        this.quantity = quantity;
        this.price = price;
        this.type = type;
    }

    /**
     *
     * @return {Account}
     */
    getAccount()
    {
        return AccountsRepository.getInstance().find_by_id(this.account_id);
    }

    addToPosition()
    {
        let position = this.getAccount().findOrCreatePosition(this.symbol);
        Entity.addToDB(position);
        position.quantity = position.quantity + this.quantity;
        this.position_id = position.id;

    }

    getTotal()
    {
        return this.price * this.quantity;
    }

    getSign()
    {
        let sign = 0;
        if(this.type===Order.TYPE_BUY) {
            sign = 1;
        } else if(this.type===Order.TYPE_SELL) {
            sign = -1;
        } else {
            throw new Error('Order getTotal type is not buy or sell');
        }
        return sign;
    }

    isBuy()
    {
        return this.type === Order.TYPE_BUY;
    }

    isSell()
    {
        return this.type === Order.TYPE_SELL;
    }

    // fill()
    // {
    //     this.position.quantity += this.quantity;
    // }

    value() {
        return this.getSign()*this.price*this.quantity;
    }





}
