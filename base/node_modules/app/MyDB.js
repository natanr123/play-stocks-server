export default class MyDB
{
    static instance = null;
    collection = {};
    constructor()
    {
    }

    clear()
    {
        this.collection = {};
    }

    /**
     *
     * @return {MyDB}
     */
    static getInstance()
    {
        if(MyDB.instance === null) {
            MyDB.instance = new MyDB();
        }
        return MyDB.instance;
    }

    set(key,value)
    {
        this.collection[key] = value;
    }

    unset(key)
    {
        delete MyDB.getInstance().collection[key];
    }

    get(key)
    {
        return key;
    }

    static objToArray(obj)
    {
        let arr = [];
        for (let key in obj) {
            arr.push(obj[key]);
        }

        return arr;
    }

    findBy(theClass,propName,propValue)
    {
        let result = null;
        let collectionArray = MyDB.objToArray(this.collection);
        console.log('this.collection: ')
        console.log(this.collection);
        console.log(collectionArray);
        // @TODO shorten array
        collectionArray.forEach((obj)=>{
            console.log('obj');
            console.log(obj);
            if(obj instanceof theClass) {
                if(obj[propName]===propValue) {
                    if(result!==null){
                        throw new Error('MyDB findByProp result was found more than once');
                    }
                    result = obj;
                }
            }
        });
        return result;
    }

    findByProp(theClass, propName, propValue)
    {
        let result = null;
        let collectionArray = MyDB.objToArray(this.collection);
        // @TODO shorten array
        collectionArray.forEach((obj)=>{
            if(obj instanceof theClass) {
                if(obj[propName]===propValue) {
                    if(result!==null){
                        throw new Error('MyDB findByProp result was found more than once');
                    }
                    result = obj;
                }
            }
        });
        return result;
    }

    select(theClass, callback)
    {
        let results = [];
        let collectionArray = MyDB.objToArray(this.collection);

        // @TODO shorten array
        collectionArray.forEach((obj)=>{
            if(obj instanceof theClass) {
                let t = callback(obj);
                if(t) {
                    results.push(obj);
                }
            }
        });
        return results;
    }


    allByClass(theClass):Array<Entity>
    {
        return this.select(theClass,()=>{return true})
    }

}