"use strict";
import assert from 'assert';

import AlphaVantageServiceStub from 'test/stubs/AlphaVantageServiceStub';
import TimeUtilsStub from 'test/stubs/TimeUtilsStub'
import TimeUtils from 'app/service/TimeUtils'

import IntrinioStocksHistoryRepository from 'app/repository/IntrinioStocksHistoryRepository'
import HistoryLineIntrinio from 'app/entity/HistoryLineIntrinio'
import StocksSymbols from 'app/service/StocksSymbols'
import MyDB from 'app/MyDB'
import Entity from 'app/entity/Entity'
import IntrinioStocksHistoryRepositoryStub from 'test/stubs/IntrinioStocksHistoryRepositoryStub'


process.on('unhandledRejection', error => {
    // Won't execute
    console.log('unhandledRejection22222', error);
});

//
describe('IntrinioStocksHistoryRepository', function() {
    AlphaVantageServiceStub.start();
    TimeUtilsStub.start();

    this.timeout(1000);


    it('Intrinio add with max', ()=>
    {
        resetDB();
        let lines = [
            new HistoryLineIntrinio(100,2500,StocksSymbols.MSFT,null),
            new HistoryLineIntrinio(101,2501,StocksSymbols.MSFT,null),
            new HistoryLineIntrinio(102,2502,StocksSymbols.MSFT,null),
            new HistoryLineIntrinio(103,2504,StocksSymbols.MSFT,null),
            new HistoryLineIntrinio(104,2505,StocksSymbols.MSFT,null),
            new HistoryLineIntrinio(105,2505,StocksSymbols.MSFT,null)];

        let repository = IntrinioStocksHistoryRepository.getInstance();

        repository.maxSize = 3;
        repository.add(lines[0]);
        assert.equal(repository.firstResult().time,100);
        assert.equal(repository.lastResult().time,100);
        assert.equal(repository.count(),1);
        assert.equal(repository.fullCount(), 1);
        repository.add(lines[1]);
        assert.equal(repository.firstResult().time,100);
        assert.equal(repository.lastResult().time,101);
        assert.equal(repository.count(),2);
        assert.equal(repository.fullCount(), 2);

        repository.add(lines[2]);
        assert.equal(repository.firstResult().time,100);
        assert.equal(repository.lastResult().time,102);
        assert.equal(repository.count(),3);
        assert.equal(repository.fullCount(), 3);

        repository.add(lines[3]);
        assert.equal(repository.firstResult().time,101);
        assert.equal(repository.lastResult().time,103);
        assert.equal(repository.count(),3);
        assert.equal(repository.fullCount(), 3);
        repository.add(lines[4]);
        assert.equal(repository.firstResult().time,102);
        assert.equal(repository.lastResult().time,104);
        assert.equal(repository.count(),3);
        assert.equal(repository.fullCount(), 3);
        repository.add(lines[5]);
        assert.equal(repository.firstResult().time,103);
        assert.equal(repository.lastResult().time,105);
        assert.equal(repository.count(),3);
        assert.equal(repository.fullCount(), 3);
    });



    it('Intrinio verifyTimeSync no exception', ()=>
    {
        resetDB();
        assert.equal(IntrinioStocksHistoryRepository.STOCK_SEARCH_ACCURACY,180);
        let timeNow = TimeUtils.timeNowUtc();
        let historyLine = new HistoryLineIntrinio(timeNow,2500,StocksSymbols.MSFT,null);
        let repository = IntrinioStocksHistoryRepository.getInstance();
        repository.add(historyLine);
        IntrinioStocksHistoryRepository.getInstance().verifyTimeSync(StocksSymbols.MSFT,timeNow);
        IntrinioStocksHistoryRepository.getInstance().verifyTimeSync(StocksSymbols.MSFT,timeNow+180);
        IntrinioStocksHistoryRepository.getInstance().verifyTimeSync(StocksSymbols.MSFT,timeNow-180);

    });

    it('Intrinio createCompareMethod', ()=>
    {
        let compareCallback = IntrinioStocksHistoryRepository.createCompareMethod(10);
        let r = 0;
        r = compareCallback({time:6},{time:3});
        assert.equal(r, -1);
        r = compareCallback({time:3},{time:6});
        assert.equal(r, 1);
        r = compareCallback({time:13},{time:16});
        assert.equal(r, -1);
        r = compareCallback({time:16},{time:13});
        assert.equal(r, 1);
        r = compareCallback({time:7},{time:16});
        assert.equal(r, -1);
        r = compareCallback({time:16},{time:7});
        assert.equal(r, 1);
        r = compareCallback({time:10},{time:11});
        assert.equal(r, -1);
        r = compareCallback({time:11},{time:10});
        assert.equal(r, 1);
        r = compareCallback({time:11},{time:11});
        assert.equal(r, 0);
    });

    it('sort by nearest time', ()=>
    {
        resetDB();
        let repository = IntrinioStocksHistoryRepository.getInstance();
        repository.maxSize = 8000;
        IntrinioStocksHistoryRepositoryStub.fillSomeData();

        assert.equal(repository.count(), 7293);
        assert.equal(repository.fullCount(), 7293);
        let lines = IntrinioStocksHistoryRepository.getInstance().all();
        assert.equal(lines.length, 7293);
        let lastLine = repository.lastResult();
        let lastLineTime = lastLine.time;
        assert.equal(lastLineTime,1500667198.870503);
        let sortedLines = IntrinioStocksHistoryRepository.sortByNearestTime(lastLineTime,lines);
        assert.equal(sortedLines[0].time, lastLineTime);
    });

    it('nearest', ()=>
    {
        resetDB();
        let repository = IntrinioStocksHistoryRepository.getInstance();
        repository.maxSize = 8000;
        IntrinioStocksHistoryRepositoryStub.fillSomeData();

        let lines = repository.all();

        assert.equal(lines.length, 7293);
        let lastLine = repository.lastResult();
        let lastLineTime = lastLine.time;
        assert.equal(lastLineTime,1500667198.870503);
        let nearest = IntrinioStocksHistoryRepository.getInstance().nearest(StocksSymbols.MSFT,lastLineTime);
        assert.equal(nearest.time, lastLineTime);

    });

    it('find simple', ()=>
    {
        resetDB();
        let repository = IntrinioStocksHistoryRepository.getInstance();
        repository.maxSize = 8000;
        IntrinioStocksHistoryRepositoryStub.fillSomeData();


        let found;
        let lines = repository.all();

        assert.equal(lines.length, 7293);
        let lastLine = repository.lastResult();
        let lastLineTime = lastLine.time;
        assert.equal(lastLineTime,1500667198.870503);

        found = repository.find(StocksSymbols.MSFT, lastLineTime);
        assert.equal(found === null, false);
        assert.equal(found.time, lastLineTime);

    });

    it('getLastsBySteps', ()=>
    {
        resetDB();
        let repository = IntrinioStocksHistoryRepository.getInstance();
        repository.maxSize = 8000;
        IntrinioStocksHistoryRepositoryStub.fillSomeData();

        let lines = repository.all();
        assert.equal(lines.length, 7293);
        let lastLine = repository.lastResult();
        let lastLineTime = lastLine.time;
        assert.equal(lastLineTime,1500667198.870503);

        let last6Arr = repository.getLastsBySteps(StocksSymbols.MSFT,lastLineTime,6,60*5);

        assert.equal(last6Arr.length, 6);
        console.log('last6Arr[0]: ',last6Arr);
        assert.equal(last6Arr[0].newYorkTime,'2017-07-21 15:59:58');
        assert.equal(last6Arr[1].newYorkTime,'2017-07-21 15:54:58');
        assert.equal(last6Arr[2].newYorkTime,'2017-07-21 15:50:00');
        assert.equal(last6Arr[3].newYorkTime,'2017-07-21 15:44:57');
        assert.equal(last6Arr[4].newYorkTime,'2017-07-21 15:39:57');
        assert.equal(last6Arr[5].newYorkTime,'2017-07-21 15:34:59');
    });

    it('last6by5', ()=>
    {
        resetDB();
        let repository = IntrinioStocksHistoryRepository.getInstance();
        repository.maxSize = 8000;
        IntrinioStocksHistoryRepositoryStub.fillSomeData();

        let lines = repository.all();
        assert.equal(lines.length, 7293);
        let lastLine = repository.lastResult();
        let lastLineTime = lastLine.time;
        assert.equal(lastLineTime,1500667198.870503);

        let last6Arr = repository.last6by5(StocksSymbols.MSFT,lastLineTime);

        assert.equal(last6Arr.length, 6);
        console.log('last6Arr[0]: ',last6Arr);
        assert.equal(last6Arr[0].newYorkTime,'2017-07-21 15:59:58');
        assert.equal(last6Arr[1].newYorkTime,'2017-07-21 15:54:58');
        assert.equal(last6Arr[2].newYorkTime,'2017-07-21 15:50:00');
        assert.equal(last6Arr[3].newYorkTime,'2017-07-21 15:44:57');
        assert.equal(last6Arr[4].newYorkTime,'2017-07-21 15:39:57');
        assert.equal(last6Arr[5].newYorkTime,'2017-07-21 15:34:59');
    })


    function resetDB() {
        MyDB.getInstance().clear();
        Entity.reset();
        IntrinioStocksHistoryRepository.getInstance().countCache = 0;
    }

    function fillSomeData() {
        let lines = [
            new HistoryLineIntrinio(100,2500,StocksSymbols.MSFT,null),
            new HistoryLineIntrinio(101,2501,StocksSymbols.MSFT,null),
            new HistoryLineIntrinio(102,2502,StocksSymbols.MSFT,null),
            new HistoryLineIntrinio(103,2504,StocksSymbols.MSFT,null),
            new HistoryLineIntrinio(104,2505,StocksSymbols.MSFT,null),
            new HistoryLineIntrinio(105,2505,StocksSymbols.MSFT,null)];

        let repository = IntrinioStocksHistoryRepository.getInstance();

        repository.maxSize = 3;
        repository.add(lines[0]);
        assert.equal(repository.firstResult().time,100);
        assert.equal(repository.lastResult().time,100);
        assert.equal(repository.count(),1);
        repository.add(lines[1]);
        assert.equal(repository.firstResult().time,100);
        assert.equal(repository.lastResult().time,101);
        assert.equal(repository.count(),2);
        repository.add(lines[2]);
        assert.equal(repository.firstResult().time,100);
        assert.equal(repository.lastResult().time,102);
        assert.equal(repository.count(),3);
        repository.add(lines[3]);
        assert.equal(repository.firstResult().time,101);
        assert.equal(repository.lastResult().time,103);
        assert.equal(repository.count(),3);
        repository.add(lines[4]);
        assert.equal(repository.firstResult().time,102);
        assert.equal(repository.lastResult().time,104);
        assert.equal(repository.count(),3);
        repository.add(lines[5]);
        assert.equal(repository.firstResult().time,103);
        assert.equal(repository.lastResult().time,105);
        assert.equal(repository.count(),3);

    }





});