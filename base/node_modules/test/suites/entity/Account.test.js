"use strict";
import assert from 'assert';

import AlphaVantageServiceStub from 'test/stubs/AlphaVantageServiceStub'
import TimeUtilsStub from 'test/stubs/TimeUtilsStub'


import Order from 'app/entity/Order'
import Account from 'app/entity/Account'
import AccountsRepository from 'app/repository/AccountsRepository'
import StocksSymbols from 'app/service/StocksSymbols'
import MyDB from 'app/MyDB'
import Entity from 'app/entity/Entity'
import PositionsRepository from 'app/repository/PositionsRepository'
import AlphaVantageService from 'app/service/AlphaVantageService'
import AlphaStocksManager from 'app/stocks/AlphaStocksManager'
import StocksHistory from 'app/repository/StocksHistory'
import TimeUtils from 'app/service/TimeUtils'


process.on('unhandledRejection', error => {
    // Won't execute
    console.log('unhandledRejection33333', error);
});

//
describe('Account', function() {
    AlphaVantageServiceStub.start();
    TimeUtilsStub.start();
    this.timeout(2000);

    beforeEach(()=>{
        console.log('Cleaning');
        resetDB();
        StocksHistory.getInstance().clearStock();

    });

    it('getPositions', ()=>
    {

        resetDB();
        let account = new Account(0,false);
        AccountsRepository.getInstance().add(account);
        assert.equal(account.id,1);
        let positions = account.getPositions();
        assert(Array.isArray(positions),true);
        assert.equal(positions.length,0);

    });

    it('getPosition when no positions', ()=>
    {
        resetDB();
        let account = new Account(0,false);
        AccountsRepository.getInstance().add(account);
        assert.equal(account.id,1);
        let position = account.getPosition(StocksSymbols.MSFT);
        assert.equal(position,null);
    });

    it('buildPosition when no positions', ()=>
    {
        resetDB();
        console.log('getPosition test:');
        let account = new Account(0,false);
        AccountsRepository.getInstance().add(account);
        assert.equal(account.id,1);
        let position = account.buildPosition(StocksSymbols.MSFT);
        PositionsRepository.getInstance().add(position);
        assert.equal(position !== null,true);
        assert.equal(position !== undefined,true);
        assert.equal(position.getAccount().equal(account),true);
        let foundPositions = account.getPositions();
        assert.equal(foundPositions.length,1);
        let foundPosition = account.getPosition(StocksSymbols.MSFT);
        assert.equal(foundPosition.equal(position),true);
    });


    it('paceAnOrder when there are prices', (done)=>
    {
        assert.equal(TimeUtils.isNYSEopen(),true);
        console.log('Starting.....');
            AlphaStocksManager.getInstance().start(100,1).then(()=>{
                let found = StocksHistory.getInstance().find(StocksSymbols.MSFT, 1498242960,60);
                assert.equal(StocksHistory.getInstance().histories[StocksSymbols.MSFT].length, 100);
                let account = new Account(0,false);
                AccountsRepository.getInstance().add(account);
                let order = account.placeOrder(StocksSymbols.MSFT,30,found.price,Order.TYPE_BUY);
                console.log('order: ',order);
                assert.equal(order.price,71.05);
                done();
            });

    });

    function resetDB() {
        MyDB.getInstance().clear();
        Entity.reset();
    }


});