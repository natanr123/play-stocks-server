"use strict";
import assert from 'assert';
import AlphaVantageService from 'app/service/AlphaVantageService';
import AlphaVantageServiceStub from 'test/stubs/AlphaVantageServiceStub';

import StocksSymbols from 'app/service/StocksSymbols';

import AlphaStocksManager from 'app/stocks/AlphaStocksManager';
import TimeUtils from 'app/service/TimeUtils';
import StocksHistory from 'app/repository/StocksHistory';

import sinon from 'sinon';

process.on('unhandledRejection', error => {
    // Won't execute
    console.log('unhandledRejection22222', error);
});

//
describe('AlphaStocksManager start', function() {
    AlphaVantageServiceStub.start();
    this.timeout(2000);

    it('loop should loop each 30 seconds', (done)=>
    {
        // step,limit,clock,callback,done
        let counter = 0;
        AlphaStocksManager.getInstance().loop(100,3,null,()=>{
            counter++;
        }).then(()=>{
            assert.equal(counter, 3);
            done();
        })
    });

    it('step should fill the histories', (done)=>
    {
        StocksHistory.getInstance().histories[StocksSymbols.MSFT] = [];
        AlphaStocksManager.step().then(()=>{
           assert.equal(StocksHistory.getInstance().histories[StocksSymbols.MSFT].length, 100);
           done();
        });
    });

    it('start should run step every 30 seconds', (done)=>
    {
        StocksHistory.getInstance().histories[StocksSymbols.MSFT] = [];
        AlphaStocksManager.getInstance().start(50,4).then(()=>{
            assert.equal(AlphaStocksManager.getInstance().limits.counter, 3);
            done();
        })

    });



});